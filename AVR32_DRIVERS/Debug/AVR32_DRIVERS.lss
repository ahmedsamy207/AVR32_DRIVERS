
AVR32_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000856  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000856  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000f8  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cb9  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000054d  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000533  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001bc  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000369  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001188  00000000  00000000  00002661  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000037e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
   8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
   c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  10:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  14:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  18:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  1c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  20:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  24:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  28:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  2c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  30:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  34:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  38:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  3c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  40:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  44:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  48:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  4c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  50:	0c 94 3b 01 	jmp	0x276	; 0x276 <__bad_interrupt>
  54:	89 01       	movw	r16, r18
  56:	a6 01       	movw	r20, r12
  58:	c3 01       	movw	r24, r6
  5a:	e0 01       	movw	r28, r0
  5c:	fc 01       	movw	r30, r24
  5e:	fc 01       	movw	r30, r24
  60:	fc 01       	movw	r30, r24
  62:	fc 01       	movw	r30, r24
  64:	fc 01       	movw	r30, r24
  66:	fc 01       	movw	r30, r24
  68:	fc 01       	movw	r30, r24
  6a:	fc 01       	movw	r30, r24
  6c:	fc 01       	movw	r30, r24
  6e:	fc 01       	movw	r30, r24
  70:	fc 01       	movw	r30, r24
  72:	fc 01       	movw	r30, r24
  74:	fc 01       	movw	r30, r24
  76:	fc 01       	movw	r30, r24
  78:	fc 01       	movw	r30, r24
  7a:	fc 01       	movw	r30, r24
  7c:	fc 01       	movw	r30, r24
  7e:	fc 01       	movw	r30, r24
  80:	fc 01       	movw	r30, r24
  82:	fc 01       	movw	r30, r24
  84:	fc 01       	movw	r30, r24
  86:	fc 01       	movw	r30, r24
  88:	fc 01       	movw	r30, r24
  8a:	fc 01       	movw	r30, r24
  8c:	fc 01       	movw	r30, r24
  8e:	fc 01       	movw	r30, r24
  90:	fc 01       	movw	r30, r24
  92:	fc 01       	movw	r30, r24
  94:	89 01       	movw	r16, r18
  96:	a6 01       	movw	r20, r12
  98:	c3 01       	movw	r24, r6
  9a:	e0 01       	movw	r28, r0
  9c:	0a 02       	muls	r16, r26
  9e:	1f 02       	muls	r17, r31
  a0:	34 02       	muls	r19, r20
  a2:	49 02       	muls	r20, r25
  a4:	5e 02       	muls	r21, r30
  a6:	5e 02       	muls	r21, r30
  a8:	5e 02       	muls	r21, r30
  aa:	5e 02       	muls	r21, r30
  ac:	5e 02       	muls	r21, r30
  ae:	5e 02       	muls	r21, r30
  b0:	5e 02       	muls	r21, r30
  b2:	5e 02       	muls	r21, r30
  b4:	5e 02       	muls	r21, r30
  b6:	5e 02       	muls	r21, r30
  b8:	5e 02       	muls	r21, r30
  ba:	5e 02       	muls	r21, r30
  bc:	5e 02       	muls	r21, r30
  be:	5e 02       	muls	r21, r30
  c0:	5e 02       	muls	r21, r30
  c2:	5e 02       	muls	r21, r30
  c4:	5e 02       	muls	r21, r30
  c6:	5e 02       	muls	r21, r30
  c8:	5e 02       	muls	r21, r30
  ca:	5e 02       	muls	r21, r30
  cc:	5e 02       	muls	r21, r30
  ce:	5e 02       	muls	r21, r30
  d0:	5e 02       	muls	r21, r30
  d2:	5e 02       	muls	r21, r30
  d4:	5e 02       	muls	r21, r30
  d6:	5e 02       	muls	r21, r30
  d8:	5e 02       	muls	r21, r30
  da:	5e 02       	muls	r21, r30
  dc:	0a 02       	muls	r16, r26
  de:	1f 02       	muls	r17, r31
  e0:	34 02       	muls	r19, r20
  e2:	49 02       	muls	r20, r25
  e4:	6b 02       	muls	r22, r27
  e6:	6d 02       	muls	r22, r29
  e8:	6f 02       	muls	r22, r31
  ea:	71 02       	muls	r23, r17
  ec:	72 02       	muls	r23, r18
  ee:	72 02       	muls	r23, r18
  f0:	72 02       	muls	r23, r18
  f2:	72 02       	muls	r23, r18
  f4:	72 02       	muls	r23, r18
  f6:	72 02       	muls	r23, r18
  f8:	72 02       	muls	r23, r18
  fa:	72 02       	muls	r23, r18
  fc:	72 02       	muls	r23, r18
  fe:	72 02       	muls	r23, r18
 100:	72 02       	muls	r23, r18
 102:	72 02       	muls	r23, r18
 104:	72 02       	muls	r23, r18
 106:	72 02       	muls	r23, r18
 108:	72 02       	muls	r23, r18
 10a:	72 02       	muls	r23, r18
 10c:	72 02       	muls	r23, r18
 10e:	72 02       	muls	r23, r18
 110:	72 02       	muls	r23, r18
 112:	72 02       	muls	r23, r18
 114:	72 02       	muls	r23, r18
 116:	72 02       	muls	r23, r18
 118:	72 02       	muls	r23, r18
 11a:	72 02       	muls	r23, r18
 11c:	72 02       	muls	r23, r18
 11e:	72 02       	muls	r23, r18
 120:	72 02       	muls	r23, r18
 122:	72 02       	muls	r23, r18
 124:	6b 02       	muls	r22, r27
 126:	6d 02       	muls	r22, r29
 128:	6f 02       	muls	r22, r31
 12a:	71 02       	muls	r23, r17
 12c:	7e 02       	muls	r23, r30
 12e:	80 02       	muls	r24, r16
 130:	82 02       	muls	r24, r18
 132:	84 02       	muls	r24, r20
 134:	85 02       	muls	r24, r21
 136:	85 02       	muls	r24, r21
 138:	85 02       	muls	r24, r21
 13a:	85 02       	muls	r24, r21
 13c:	85 02       	muls	r24, r21
 13e:	85 02       	muls	r24, r21
 140:	85 02       	muls	r24, r21
 142:	85 02       	muls	r24, r21
 144:	85 02       	muls	r24, r21
 146:	85 02       	muls	r24, r21
 148:	85 02       	muls	r24, r21
 14a:	85 02       	muls	r24, r21
 14c:	85 02       	muls	r24, r21
 14e:	85 02       	muls	r24, r21
 150:	85 02       	muls	r24, r21
 152:	85 02       	muls	r24, r21
 154:	85 02       	muls	r24, r21
 156:	85 02       	muls	r24, r21
 158:	85 02       	muls	r24, r21
 15a:	85 02       	muls	r24, r21
 15c:	85 02       	muls	r24, r21
 15e:	85 02       	muls	r24, r21
 160:	85 02       	muls	r24, r21
 162:	85 02       	muls	r24, r21
 164:	85 02       	muls	r24, r21
 166:	85 02       	muls	r24, r21
 168:	85 02       	muls	r24, r21
 16a:	85 02       	muls	r24, r21
 16c:	7e 02       	muls	r23, r30
 16e:	80 02       	muls	r24, r16
 170:	82 02       	muls	r24, r18
 172:	84 02       	muls	r24, r20
 174:	92 02       	muls	r25, r18
 176:	b2 02       	muls	r27, r18
 178:	d2 02       	muls	r29, r18
 17a:	f2 02       	muls	r31, r18
 17c:	11 03       	mulsu	r17, r17
 17e:	11 03       	mulsu	r17, r17
 180:	11 03       	mulsu	r17, r17
 182:	11 03       	mulsu	r17, r17
 184:	11 03       	mulsu	r17, r17
 186:	11 03       	mulsu	r17, r17
 188:	11 03       	mulsu	r17, r17
 18a:	11 03       	mulsu	r17, r17
 18c:	11 03       	mulsu	r17, r17
 18e:	11 03       	mulsu	r17, r17
 190:	11 03       	mulsu	r17, r17
 192:	11 03       	mulsu	r17, r17
 194:	11 03       	mulsu	r17, r17
 196:	11 03       	mulsu	r17, r17
 198:	11 03       	mulsu	r17, r17
 19a:	11 03       	mulsu	r17, r17
 19c:	11 03       	mulsu	r17, r17
 19e:	11 03       	mulsu	r17, r17
 1a0:	11 03       	mulsu	r17, r17
 1a2:	11 03       	mulsu	r17, r17
 1a4:	11 03       	mulsu	r17, r17
 1a6:	11 03       	mulsu	r17, r17
 1a8:	11 03       	mulsu	r17, r17
 1aa:	11 03       	mulsu	r17, r17
 1ac:	11 03       	mulsu	r17, r17
 1ae:	11 03       	mulsu	r17, r17
 1b0:	11 03       	mulsu	r17, r17
 1b2:	11 03       	mulsu	r17, r17
 1b4:	92 02       	muls	r25, r18
 1b6:	b2 02       	muls	r27, r18
 1b8:	d2 02       	muls	r29, r18
 1ba:	f2 02       	muls	r31, r18
 1bc:	4c 03       	fmul	r20, r20
 1be:	53 03       	mulsu	r21, r19
 1c0:	5a 03       	fmul	r21, r18
 1c2:	61 03       	mulsu	r22, r17
 1c4:	67 03       	mulsu	r22, r23
 1c6:	67 03       	mulsu	r22, r23
 1c8:	67 03       	mulsu	r22, r23
 1ca:	67 03       	mulsu	r22, r23
 1cc:	67 03       	mulsu	r22, r23
 1ce:	67 03       	mulsu	r22, r23
 1d0:	67 03       	mulsu	r22, r23
 1d2:	67 03       	mulsu	r22, r23
 1d4:	67 03       	mulsu	r22, r23
 1d6:	67 03       	mulsu	r22, r23
 1d8:	67 03       	mulsu	r22, r23
 1da:	67 03       	mulsu	r22, r23
 1dc:	67 03       	mulsu	r22, r23
 1de:	67 03       	mulsu	r22, r23
 1e0:	67 03       	mulsu	r22, r23
 1e2:	67 03       	mulsu	r22, r23
 1e4:	67 03       	mulsu	r22, r23
 1e6:	67 03       	mulsu	r22, r23
 1e8:	67 03       	mulsu	r22, r23
 1ea:	67 03       	mulsu	r22, r23
 1ec:	67 03       	mulsu	r22, r23
 1ee:	67 03       	mulsu	r22, r23
 1f0:	67 03       	mulsu	r22, r23
 1f2:	67 03       	mulsu	r22, r23
 1f4:	67 03       	mulsu	r22, r23
 1f6:	67 03       	mulsu	r22, r23
 1f8:	67 03       	mulsu	r22, r23
 1fa:	67 03       	mulsu	r22, r23
 1fc:	4c 03       	fmul	r20, r20
 1fe:	53 03       	mulsu	r21, r19
 200:	5a 03       	fmul	r21, r18
 202:	61 03       	mulsu	r22, r17
 204:	a1 03       	fmuls	r18, r17
 206:	a8 03       	fmulsu	r18, r16
 208:	af 03       	fmulsu	r18, r23
 20a:	b6 03       	fmuls	r19, r22
 20c:	bc 03       	fmulsu	r19, r20
 20e:	bc 03       	fmulsu	r19, r20
 210:	bc 03       	fmulsu	r19, r20
 212:	bc 03       	fmulsu	r19, r20
 214:	bc 03       	fmulsu	r19, r20
 216:	bc 03       	fmulsu	r19, r20
 218:	bc 03       	fmulsu	r19, r20
 21a:	bc 03       	fmulsu	r19, r20
 21c:	bc 03       	fmulsu	r19, r20
 21e:	bc 03       	fmulsu	r19, r20
 220:	bc 03       	fmulsu	r19, r20
 222:	bc 03       	fmulsu	r19, r20
 224:	bc 03       	fmulsu	r19, r20
 226:	bc 03       	fmulsu	r19, r20
 228:	bc 03       	fmulsu	r19, r20
 22a:	bc 03       	fmulsu	r19, r20
 22c:	bc 03       	fmulsu	r19, r20
 22e:	bc 03       	fmulsu	r19, r20
 230:	bc 03       	fmulsu	r19, r20
 232:	bc 03       	fmulsu	r19, r20
 234:	bc 03       	fmulsu	r19, r20
 236:	bc 03       	fmulsu	r19, r20
 238:	bc 03       	fmulsu	r19, r20
 23a:	bc 03       	fmulsu	r19, r20
 23c:	bc 03       	fmulsu	r19, r20
 23e:	bc 03       	fmulsu	r19, r20
 240:	bc 03       	fmulsu	r19, r20
 242:	bc 03       	fmulsu	r19, r20
 244:	a1 03       	fmuls	r18, r17
 246:	a8 03       	fmulsu	r18, r16
 248:	af 03       	fmulsu	r18, r23
 24a:	b6 03       	fmuls	r19, r22

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf e5       	ldi	r28, 0x5F	; 95
 252:	d8 e0       	ldi	r29, 0x08	; 8
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	a0 e6       	ldi	r26, 0x60	; 96
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e6 e5       	ldi	r30, 0x56	; 86
 260:	f8 e0       	ldi	r31, 0x08	; 8
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a0 37       	cpi	r26, 0x70	; 112
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>
 26e:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
 272:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

00000276 <__bad_interrupt>:
 276:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027a <main>:



int main(void)
{
	BUTTON_vInit('A',0);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	0e 94 66 01 	call	0x2cc	; 0x2cc <BUTTON_vInit>
	GPIO_vconnectpullup('A',0,Connect);
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e4       	ldi	r24, 0x41	; 65
 288:	0e 94 86 02 	call	0x50c	; 0x50c <GPIO_vconnectpullup>
	Seven_Segment_Init(Eight_Bit,'D',Low_Nibble);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	64 e4       	ldi	r22, 0x44	; 68
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 bd 03 	call	0x77a	; 0x77a <Seven_Segment_Init>
	
	while(1)
    {
		u8 i;
		u8 x = BUTTON_u8read('A',0);
		if (x==0)
 296:	d1 e0       	ldi	r29, 0x01	; 1
	Seven_Segment_Init(Eight_Bit,'D',Low_Nibble);
	
	while(1)
    {
		u8 i;
		u8 x = BUTTON_u8read('A',0);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BUTTON_u8read>
		if (x==0)
 2a0:	81 11       	cpse	r24, r1
 2a2:	fa cf       	rjmp	.-12     	; 0x298 <main+0x1e>
 2a4:	cd 2f       	mov	r28, r29
		{
			for( i=1;i<=9;i++){
				Seven_Segment_Display(Eight_Bit,Low_Nibble,'D',i);
 2a6:	2c 2f       	mov	r18, r28
 2a8:	44 e4       	ldi	r20, 0x44	; 68
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	8d 2f       	mov	r24, r29
 2ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Seven_Segment_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	89 e6       	ldi	r24, 0x69	; 105
 2b6:	98 e1       	ldi	r25, 0x18	; 24
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x3e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x48>
 2c2:	00 00       	nop
    {
		u8 i;
		u8 x = BUTTON_u8read('A',0);
		if (x==0)
		{
			for( i=1;i<=9;i++){
 2c4:	cf 5f       	subi	r28, 0xFF	; 255
 2c6:	ca 30       	cpi	r28, 0x0A	; 10
 2c8:	71 f7       	brne	.-36     	; 0x2a6 <main+0x2c>
 2ca:	e6 cf       	rjmp	.-52     	; 0x298 <main+0x1e>

000002cc <BUTTON_vInit>:
#include "GPIO_MCAL.h"
#define F_CPU 8000000UL
#include "util/delay.h"

void BUTTON_vInit(u8 port, u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 0);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
 2d2:	08 95       	ret

000002d4 <BUTTON_u8read>:
}

u8 BUTTON_u8read(u8 port, u8 pin){
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	c8 2f       	mov	r28, r24
 2da:	d6 2f       	mov	r29, r22
	u8 x;
	x = GPIO_u8read_PIN(port, pin);
 2dc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <GPIO_u8read_PIN>
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	97 e2       	ldi	r25, 0x27	; 39
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <BUTTON_u8read+0x10>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <BUTTON_u8read+0x16>
 2ea:	00 00       	nop
	_delay_ms(5);
	x = GPIO_u8read_PIN(port, pin);
 2ec:	6d 2f       	mov	r22, r29
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <GPIO_u8read_PIN>
	return x;
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <GPIO_vsetPIN_DIR>:
//==============================================================================================================

//=================================================PIN==========================================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir){
	switch (portnum){
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	fc 01       	movw	r30, r24
 2fe:	e1 54       	subi	r30, 0x41	; 65
 300:	f1 09       	sbc	r31, r1
 302:	e4 32       	cpi	r30, 0x24	; 36
 304:	f1 05       	cpc	r31, r1
 306:	08 f0       	brcs	.+2      	; 0x30a <GPIO_vsetPIN_DIR+0x10>
 308:	77 c0       	rjmp	.+238    	; 0x3f8 <GPIO_vsetPIN_DIR+0xfe>
 30a:	e6 5d       	subi	r30, 0xD6	; 214
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			if(dir == 1){
 312:	41 30       	cpi	r20, 0x01	; 1
 314:	69 f4       	brne	.+26     	; 0x330 <GPIO_vsetPIN_DIR+0x36>
				SET_BIT(myDDRA,pinnum);
 316:	2a b3       	in	r18, 0x1a	; 26
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	02 c0       	rjmp	.+4      	; 0x324 <GPIO_vsetPIN_DIR+0x2a>
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <GPIO_vsetPIN_DIR+0x26>
 328:	ba 01       	movw	r22, r20
 32a:	62 2b       	or	r22, r18
 32c:	6a bb       	out	0x1a, r22	; 26
 32e:	08 95       	ret
			}else{
				CLR_BIT(myDDRA,pinnum);
 330:	2a b3       	in	r18, 0x1a	; 26
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_vsetPIN_DIR+0x44>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_vsetPIN_DIR+0x40>
 342:	ba 01       	movw	r22, r20
 344:	60 95       	com	r22
 346:	62 23       	and	r22, r18
 348:	6a bb       	out	0x1a, r22	; 26
 34a:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if(dir == 1){
 34c:	41 30       	cpi	r20, 0x01	; 1
 34e:	69 f4       	brne	.+26     	; 0x36a <GPIO_vsetPIN_DIR+0x70>
				SET_BIT(myDDRB,pinnum);
 350:	27 b3       	in	r18, 0x17	; 23
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	ac 01       	movw	r20, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <GPIO_vsetPIN_DIR+0x64>
 35a:	44 0f       	add	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <GPIO_vsetPIN_DIR+0x60>
 362:	ba 01       	movw	r22, r20
 364:	62 2b       	or	r22, r18
 366:	67 bb       	out	0x17, r22	; 23
 368:	08 95       	ret
			}else{
				CLR_BIT(myDDRB,pinnum);
 36a:	27 b3       	in	r18, 0x17	; 23
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ac 01       	movw	r20, r24
 372:	02 c0       	rjmp	.+4      	; 0x378 <GPIO_vsetPIN_DIR+0x7e>
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <GPIO_vsetPIN_DIR+0x7a>
 37c:	ba 01       	movw	r22, r20
 37e:	60 95       	com	r22
 380:	62 23       	and	r22, r18
 382:	67 bb       	out	0x17, r22	; 23
 384:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
 386:	41 30       	cpi	r20, 0x01	; 1
 388:	69 f4       	brne	.+26     	; 0x3a4 <GPIO_vsetPIN_DIR+0xaa>
				SET_BIT(myDDRC,pinnum);
 38a:	24 b3       	in	r18, 0x14	; 20
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	ac 01       	movw	r20, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <GPIO_vsetPIN_DIR+0x9e>
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <GPIO_vsetPIN_DIR+0x9a>
 39c:	ba 01       	movw	r22, r20
 39e:	62 2b       	or	r22, r18
 3a0:	64 bb       	out	0x14, r22	; 20
 3a2:	08 95       	ret
			}else{
				CLR_BIT(myDDRC,pinnum);
 3a4:	24 b3       	in	r18, 0x14	; 20
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	ac 01       	movw	r20, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <GPIO_vsetPIN_DIR+0xb8>
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <GPIO_vsetPIN_DIR+0xb4>
 3b6:	ba 01       	movw	r22, r20
 3b8:	60 95       	com	r22
 3ba:	62 23       	and	r22, r18
 3bc:	64 bb       	out	0x14, r22	; 20
 3be:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
 3c0:	41 30       	cpi	r20, 0x01	; 1
 3c2:	69 f4       	brne	.+26     	; 0x3de <GPIO_vsetPIN_DIR+0xe4>
				SET_BIT(myDDRD,pinnum);
 3c4:	21 b3       	in	r18, 0x11	; 17
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	ac 01       	movw	r20, r24
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <GPIO_vsetPIN_DIR+0xd8>
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <GPIO_vsetPIN_DIR+0xd4>
 3d6:	ba 01       	movw	r22, r20
 3d8:	62 2b       	or	r22, r18
 3da:	61 bb       	out	0x11, r22	; 17
 3dc:	08 95       	ret
			}else{
				CLR_BIT(myDDRD,pinnum);
 3de:	21 b3       	in	r18, 0x11	; 17
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	ac 01       	movw	r20, r24
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <GPIO_vsetPIN_DIR+0xf2>
 3e8:	44 0f       	add	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <GPIO_vsetPIN_DIR+0xee>
 3f0:	ba 01       	movw	r22, r20
 3f2:	60 95       	com	r22
 3f4:	62 23       	and	r22, r18
 3f6:	61 bb       	out	0x11, r22	; 17
 3f8:	08 95       	ret

000003fa <GPIO_u8read_PIN>:

//======================================================================================================

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
 3fa:	48 2f       	mov	r20, r24
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	fa 01       	movw	r30, r20
 400:	e1 54       	subi	r30, 0x41	; 65
 402:	f1 09       	sbc	r31, r1
 404:	e4 32       	cpi	r30, 0x24	; 36
 406:	f1 05       	cpc	r31, r1
 408:	08 f0       	brcs	.+2      	; 0x40c <GPIO_u8read_PIN+0x12>
 40a:	58 c0       	rjmp	.+176    	; 0x4bc <GPIO_u8read_PIN+0xc2>
 40c:	e2 5b       	subi	r30, 0xB2	; 178
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			x = READ_BIT(myPINA,pinnum);
 414:	29 b3       	in	r18, 0x19	; 25
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	06 2e       	mov	r0, r22
 41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_u8read_PIN+0x28>
 41e:	44 0f       	add	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_u8read_PIN+0x24>
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	24 23       	and	r18, r20
 42a:	35 23       	and	r19, r21
 42c:	a9 01       	movw	r20, r18
 42e:	06 2e       	mov	r0, r22
 430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_u8read_PIN+0x3c>
 432:	55 95       	asr	r21
 434:	47 95       	ror	r20
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_u8read_PIN+0x38>
 43a:	ca 01       	movw	r24, r20
			break;
 43c:	08 95       	ret
		case 'B' :
		case 'b' :
			x = READ_BIT(myPINB,pinnum);
 43e:	26 b3       	in	r18, 0x16	; 22
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	06 2e       	mov	r0, r22
 446:	02 c0       	rjmp	.+4      	; 0x44c <GPIO_u8read_PIN+0x52>
 448:	44 0f       	add	r20, r20
 44a:	55 1f       	adc	r21, r21
 44c:	0a 94       	dec	r0
 44e:	e2 f7       	brpl	.-8      	; 0x448 <GPIO_u8read_PIN+0x4e>
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	24 23       	and	r18, r20
 454:	35 23       	and	r19, r21
 456:	a9 01       	movw	r20, r18
 458:	06 2e       	mov	r0, r22
 45a:	02 c0       	rjmp	.+4      	; 0x460 <GPIO_u8read_PIN+0x66>
 45c:	55 95       	asr	r21
 45e:	47 95       	ror	r20
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <GPIO_u8read_PIN+0x62>
 464:	ca 01       	movw	r24, r20
			break;
 466:	08 95       	ret
		case 'C' :
		case 'c' :
			x = READ_BIT(myPINC,pinnum);
 468:	23 b3       	in	r18, 0x13	; 19
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	06 2e       	mov	r0, r22
 470:	02 c0       	rjmp	.+4      	; 0x476 <GPIO_u8read_PIN+0x7c>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <GPIO_u8read_PIN+0x78>
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	24 23       	and	r18, r20
 47e:	35 23       	and	r19, r21
 480:	a9 01       	movw	r20, r18
 482:	06 2e       	mov	r0, r22
 484:	02 c0       	rjmp	.+4      	; 0x48a <GPIO_u8read_PIN+0x90>
 486:	55 95       	asr	r21
 488:	47 95       	ror	r20
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <GPIO_u8read_PIN+0x8c>
 48e:	ca 01       	movw	r24, r20
			break;
 490:	08 95       	ret
		case 'D' :
		case 'd' :
			x = READ_BIT(myPIND,pinnum);
 492:	20 b3       	in	r18, 0x10	; 16
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	06 2e       	mov	r0, r22
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <GPIO_u8read_PIN+0xa6>
 49c:	44 0f       	add	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <GPIO_u8read_PIN+0xa2>
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	24 23       	and	r18, r20
 4a8:	35 23       	and	r19, r21
 4aa:	a9 01       	movw	r20, r18
 4ac:	06 2e       	mov	r0, r22
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GPIO_u8read_PIN+0xba>
 4b0:	55 95       	asr	r21
 4b2:	47 95       	ror	r20
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <GPIO_u8read_PIN+0xb6>
 4b8:	ca 01       	movw	r24, r20
			break;
 4ba:	08 95       	ret
}

//======================================================================================================

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
			x = READ_BIT(myPIND,pinnum);
			break;
		default: break;
	}
	return x;
}
 4be:	08 95       	ret

000004c0 <GPIO_vset_PORT_DIR>:
//=====================================================================================================

//=======================================PORT==========================================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	fc 01       	movw	r30, r24
 4c4:	e1 54       	subi	r30, 0x41	; 65
 4c6:	f1 09       	sbc	r31, r1
 4c8:	e4 32       	cpi	r30, 0x24	; 36
 4ca:	f1 05       	cpc	r31, r1
 4cc:	58 f4       	brcc	.+22     	; 0x4e4 <GPIO_vset_PORT_DIR+0x24>
 4ce:	ee 58       	subi	r30, 0x8E	; 142
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			myDDRA = dir;
 4d6:	6a bb       	out	0x1a, r22	; 26
			break;
 4d8:	08 95       	ret
		case 'B' :
		case 'b' :
			myDDRB = dir;
 4da:	67 bb       	out	0x17, r22	; 23
			break;
 4dc:	08 95       	ret
		case 'C' :
		case 'c' :
			myDDRC = dir;
 4de:	64 bb       	out	0x14, r22	; 20
			break;
 4e0:	08 95       	ret
		case 'D' :
		case 'd' :
			myDDRD = dir;
 4e2:	61 bb       	out	0x11, r22	; 17
 4e4:	08 95       	ret

000004e6 <GPIO_vwrite_PORT>:
}

//========================================================================================================

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	e1 54       	subi	r30, 0x41	; 65
 4ec:	f1 09       	sbc	r31, r1
 4ee:	e4 32       	cpi	r30, 0x24	; 36
 4f0:	f1 05       	cpc	r31, r1
 4f2:	58 f4       	brcc	.+22     	; 0x50a <GPIO_vwrite_PORT+0x24>
 4f4:	ea 56       	subi	r30, 0x6A	; 106
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
 4fc:	6b bb       	out	0x1b, r22	; 27
			break;
 4fe:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
 500:	68 bb       	out	0x18, r22	; 24
			break;
 502:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
 504:	65 bb       	out	0x15, r22	; 21
			break;
 506:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
 508:	62 bb       	out	0x12, r22	; 18
 50a:	08 95       	ret

0000050c <GPIO_vconnectpullup>:
//===========================================================================================================

//=================================Internal Pull Up==========================================================

void GPIO_vconnectpullup(u8 portnum, u8 pinnum, u8 connect_pullup){
	switch(portnum){
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	e1 54       	subi	r30, 0x41	; 65
 512:	f1 09       	sbc	r31, r1
 514:	e4 32       	cpi	r30, 0x24	; 36
 516:	f1 05       	cpc	r31, r1
 518:	08 f0       	brcs	.+2      	; 0x51c <GPIO_vconnectpullup+0x10>
 51a:	83 c0       	rjmp	.+262    	; 0x622 <GPIO_vconnectpullup+0x116>
 51c:	e6 54       	subi	r30, 0x46	; 70
 51e:	ff 4f       	sbci	r31, 0xFF	; 255
 520:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			if (Connect == connect_pullup)
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	81 f4       	brne	.+32     	; 0x548 <GPIO_vconnectpullup+0x3c>
			{
				SET_BIT(myPORTA,pinnum);
 528:	2b b3       	in	r18, 0x1b	; 27
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	ac 01       	movw	r20, r24
 530:	02 c0       	rjmp	.+4      	; 0x536 <GPIO_vconnectpullup+0x2a>
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <GPIO_vconnectpullup+0x26>
 53a:	ba 01       	movw	r22, r20
 53c:	62 2b       	or	r22, r18
 53e:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
 540:	80 b7       	in	r24, 0x30	; 48
 542:	8b 7f       	andi	r24, 0xFB	; 251
 544:	80 bf       	out	0x30, r24	; 48
 546:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pinnum);
 548:	2b b3       	in	r18, 0x1b	; 27
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	ac 01       	movw	r20, r24
 550:	02 c0       	rjmp	.+4      	; 0x556 <GPIO_vconnectpullup+0x4a>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <GPIO_vconnectpullup+0x46>
 55a:	ba 01       	movw	r22, r20
 55c:	60 95       	com	r22
 55e:	62 23       	and	r22, r18
 560:	6b bb       	out	0x1b, r22	; 27
 562:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect == connect_pullup)
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	81 f4       	brne	.+32     	; 0x588 <GPIO_vconnectpullup+0x7c>
			{
				SET_BIT(myPORTB,pinnum);
 568:	28 b3       	in	r18, 0x18	; 24
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	ac 01       	movw	r20, r24
 570:	02 c0       	rjmp	.+4      	; 0x576 <GPIO_vconnectpullup+0x6a>
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <GPIO_vconnectpullup+0x66>
 57a:	ba 01       	movw	r22, r20
 57c:	62 2b       	or	r22, r18
 57e:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
 580:	80 b7       	in	r24, 0x30	; 48
 582:	8b 7f       	andi	r24, 0xFB	; 251
 584:	80 bf       	out	0x30, r24	; 48
 586:	08 95       	ret
				}else{
				CLR_BIT(myPORTB,pinnum);
 588:	28 b3       	in	r18, 0x18	; 24
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	ac 01       	movw	r20, r24
 590:	02 c0       	rjmp	.+4      	; 0x596 <GPIO_vconnectpullup+0x8a>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <GPIO_vconnectpullup+0x86>
 59a:	ba 01       	movw	r22, r20
 59c:	60 95       	com	r22
 59e:	62 23       	and	r22, r18
 5a0:	68 bb       	out	0x18, r22	; 24
 5a2:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect == connect_pullup)
 5a4:	41 30       	cpi	r20, 0x01	; 1
 5a6:	81 f4       	brne	.+32     	; 0x5c8 <GPIO_vconnectpullup+0xbc>
			{
				SET_BIT(myPORTC,pinnum);
 5a8:	25 b3       	in	r18, 0x15	; 21
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ac 01       	movw	r20, r24
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <GPIO_vconnectpullup+0xaa>
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <GPIO_vconnectpullup+0xa6>
 5ba:	ba 01       	movw	r22, r20
 5bc:	62 2b       	or	r22, r18
 5be:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
 5c0:	80 b7       	in	r24, 0x30	; 48
 5c2:	8b 7f       	andi	r24, 0xFB	; 251
 5c4:	80 bf       	out	0x30, r24	; 48
 5c6:	08 95       	ret
				}else{
				CLR_BIT(myPORTC,pinnum);
 5c8:	25 b3       	in	r18, 0x15	; 21
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <GPIO_vconnectpullup+0xca>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <GPIO_vconnectpullup+0xc6>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	65 bb       	out	0x15, r22	; 21
 5e2:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect == connect_pullup)
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	81 f4       	brne	.+32     	; 0x608 <GPIO_vconnectpullup+0xfc>
			{
				SET_BIT(myPORTD,pinnum);
 5e8:	22 b3       	in	r18, 0x12	; 18
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <GPIO_vconnectpullup+0xea>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <GPIO_vconnectpullup+0xe6>
 5fa:	ba 01       	movw	r22, r20
 5fc:	62 2b       	or	r22, r18
 5fe:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
 600:	80 b7       	in	r24, 0x30	; 48
 602:	8b 7f       	andi	r24, 0xFB	; 251
 604:	80 bf       	out	0x30, r24	; 48
 606:	08 95       	ret
				}else{
				CLR_BIT(myPORTD,pinnum);
 608:	22 b3       	in	r18, 0x12	; 18
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	ac 01       	movw	r20, r24
 610:	02 c0       	rjmp	.+4      	; 0x616 <GPIO_vconnectpullup+0x10a>
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <GPIO_vconnectpullup+0x106>
 61a:	ba 01       	movw	r22, r20
 61c:	60 95       	com	r22
 61e:	62 23       	and	r22, r18
 620:	62 bb       	out	0x12, r22	; 18
 622:	08 95       	ret

00000624 <GPIO_High_Nibble_vset_dir>:
//===========================================================================================================

//==========================================Nibble===========================================================

//=======================================High Nibble=========================================================
void GPIO_High_Nibble_vset_dir(u8 port, u8 dir){
 624:	cf 93       	push	r28
 626:	c8 2f       	mov	r28, r24
	if (1==dir){
 628:	61 30       	cpi	r22, 0x01	; 1
 62a:	a1 f4       	brne	.+40     	; 0x654 <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	64 e0       	ldi	r22, 0x04	; 4
 630:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	65 e0       	ldi	r22, 0x05	; 5
 638:	8c 2f       	mov	r24, r28
 63a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	66 e0       	ldi	r22, 0x06	; 6
 642:	8c 2f       	mov	r24, r28
 644:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	67 e0       	ldi	r22, 0x07	; 7
 64c:	8c 2f       	mov	r24, r28
 64e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
 652:	13 c0       	rjmp	.+38     	; 0x67a <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	64 e0       	ldi	r22, 0x04	; 4
 658:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	65 e0       	ldi	r22, 0x05	; 5
 660:	8c 2f       	mov	r24, r28
 662:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	66 e0       	ldi	r22, 0x06	; 6
 66a:	8c 2f       	mov	r24, r28
 66c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	67 e0       	ldi	r22, 0x07	; 7
 674:	8c 2f       	mov	r24, r28
 676:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
	}
}
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <GPIO_High_Nibble_vwrite>:

//==========================================================================================================

void GPIO_High_Nibble_vwrite(u8 port, u8 value){
	value <<= 4;
 67e:	62 95       	swap	r22
 680:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	e1 54       	subi	r30, 0x41	; 65
 688:	f1 09       	sbc	r31, r1
 68a:	e4 32       	cpi	r30, 0x24	; 36
 68c:	f1 05       	cpc	r31, r1
 68e:	f8 f4       	brcc	.+62     	; 0x6ce <GPIO_High_Nibble_vwrite+0x50>
 690:	e2 52       	subi	r30, 0x22	; 34
 692:	ff 4f       	sbci	r31, 0xFF	; 255
 694:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			myPORTA &=0x0f;
 698:	8b b3       	in	r24, 0x1b	; 27
 69a:	8f 70       	andi	r24, 0x0F	; 15
 69c:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
 69e:	8b b3       	in	r24, 0x1b	; 27
 6a0:	68 2b       	or	r22, r24
 6a2:	6b bb       	out	0x1b, r22	; 27
			break;
 6a4:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB &=0x0f;
 6a6:	88 b3       	in	r24, 0x18	; 24
 6a8:	8f 70       	andi	r24, 0x0F	; 15
 6aa:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
 6ac:	88 b3       	in	r24, 0x18	; 24
 6ae:	68 2b       	or	r22, r24
 6b0:	68 bb       	out	0x18, r22	; 24
			break;
 6b2:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC &=0x0f;
 6b4:	85 b3       	in	r24, 0x15	; 21
 6b6:	8f 70       	andi	r24, 0x0F	; 15
 6b8:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
 6ba:	85 b3       	in	r24, 0x15	; 21
 6bc:	68 2b       	or	r22, r24
 6be:	65 bb       	out	0x15, r22	; 21
			break;
 6c0:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD &=0x0f;
 6c2:	82 b3       	in	r24, 0x12	; 18
 6c4:	8f 70       	andi	r24, 0x0F	; 15
 6c6:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
 6c8:	82 b3       	in	r24, 0x12	; 18
 6ca:	68 2b       	or	r22, r24
 6cc:	62 bb       	out	0x12, r22	; 18
 6ce:	08 95       	ret

000006d0 <GPIO_Low_Nibble_vset_dir>:
}

//===========================================================================================================

//=======================================Low Nibble=========================================================
void GPIO_Low_Nibble_vset_dir(u8 port, u8 dir){
 6d0:	cf 93       	push	r28
 6d2:	c8 2f       	mov	r28, r24
	if (1==dir){
 6d4:	61 30       	cpi	r22, 0x01	; 1
 6d6:	a1 f4       	brne	.+40     	; 0x700 <GPIO_Low_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,0,1);
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
 6e0:	41 e0       	ldi	r20, 0x01	; 1
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	8c 2f       	mov	r24, r28
 6e6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
 6ea:	41 e0       	ldi	r20, 0x01	; 1
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	8c 2f       	mov	r24, r28
 6f0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
 6f4:	41 e0       	ldi	r20, 0x01	; 1
 6f6:	63 e0       	ldi	r22, 0x03	; 3
 6f8:	8c 2f       	mov	r24, r28
 6fa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
 6fe:	13 c0       	rjmp	.+38     	; 0x726 <GPIO_Low_Nibble_vset_dir+0x56>
		}else{
		GPIO_vsetPIN_DIR(port,0,0);
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	8c 2f       	mov	r24, r28
 70e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	62 e0       	ldi	r22, 0x02	; 2
 716:	8c 2f       	mov	r24, r28
 718:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
 71c:	40 e0       	ldi	r20, 0x00	; 0
 71e:	63 e0       	ldi	r22, 0x03	; 3
 720:	8c 2f       	mov	r24, r28
 722:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_vsetPIN_DIR>
	}
}
 726:	cf 91       	pop	r28
 728:	08 95       	ret

0000072a <GPIO_Low_Nibble_vwrite>:

//==========================================================================================================

void GPIO_Low_Nibble_vwrite(u8 port, u8 value){
	value &= 0x0f;
 72a:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	fc 01       	movw	r30, r24
 730:	e1 54       	subi	r30, 0x41	; 65
 732:	f1 09       	sbc	r31, r1
 734:	e4 32       	cpi	r30, 0x24	; 36
 736:	f1 05       	cpc	r31, r1
 738:	f8 f4       	brcc	.+62     	; 0x778 <GPIO_Low_Nibble_vwrite+0x4e>
 73a:	ee 5f       	subi	r30, 0xFE	; 254
 73c:	fe 4f       	sbci	r31, 0xFE	; 254
 73e:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
		case 'A' :
		case 'a' :
			myPORTA &=0xf0;
 742:	8b b3       	in	r24, 0x1b	; 27
 744:	80 7f       	andi	r24, 0xF0	; 240
 746:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
 748:	8b b3       	in	r24, 0x1b	; 27
 74a:	68 2b       	or	r22, r24
 74c:	6b bb       	out	0x1b, r22	; 27
			break;
 74e:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB &=0xf0;
 750:	88 b3       	in	r24, 0x18	; 24
 752:	80 7f       	andi	r24, 0xF0	; 240
 754:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
 756:	88 b3       	in	r24, 0x18	; 24
 758:	68 2b       	or	r22, r24
 75a:	68 bb       	out	0x18, r22	; 24
			break;
 75c:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC &=0xf0;
 75e:	85 b3       	in	r24, 0x15	; 21
 760:	80 7f       	andi	r24, 0xF0	; 240
 762:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
 764:	85 b3       	in	r24, 0x15	; 21
 766:	68 2b       	or	r22, r24
 768:	65 bb       	out	0x15, r22	; 21
			break;
 76a:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD &=0xf0;
 76c:	82 b3       	in	r24, 0x12	; 18
 76e:	80 7f       	andi	r24, 0xF0	; 240
 770:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
 772:	82 b3       	in	r24, 0x12	; 18
 774:	68 2b       	or	r22, r24
 776:	62 bb       	out	0x12, r22	; 18
 778:	08 95       	ret

0000077a <Seven_Segment_Init>:
#define Four_Bit	0
#define Eight_Bit	1
#define High_Nibble	1
#define Low_Nibble	0

void Seven_Segment_Init(u8 Mode, u8 port, u8 Nibble){
 77a:	96 2f       	mov	r25, r22
	if (0 == Mode){
 77c:	81 11       	cpse	r24, r1
 77e:	0e c0       	rjmp	.+28     	; 0x79c <Seven_Segment_Init+0x22>
		if (0 == Nibble){
 780:	41 11       	cpse	r20, r1
 782:	05 c0       	rjmp	.+10     	; 0x78e <Seven_Segment_Init+0x14>
			GPIO_Low_Nibble_vset_dir(port,1);
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	89 2f       	mov	r24, r25
 788:	0e 94 68 03 	call	0x6d0	; 0x6d0 <GPIO_Low_Nibble_vset_dir>
 78c:	08 95       	ret
		}else if (1 == Nibble){
 78e:	41 30       	cpi	r20, 0x01	; 1
 790:	59 f4       	brne	.+22     	; 0x7a8 <Seven_Segment_Init+0x2e>
			GPIO_High_Nibble_vset_dir(port,1);
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	89 2f       	mov	r24, r25
 796:	0e 94 12 03 	call	0x624	; 0x624 <GPIO_High_Nibble_vset_dir>
 79a:	08 95       	ret
		}
		else{
			
		}
	}else if (1 == Mode){
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	21 f4       	brne	.+8      	; 0x7a8 <Seven_Segment_Init+0x2e>
		GPIO_vset_PORT_DIR(port,0xff);
 7a0:	6f ef       	ldi	r22, 0xFF	; 255
 7a2:	89 2f       	mov	r24, r25
 7a4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GPIO_vset_PORT_DIR>
 7a8:	08 95       	ret

000007aa <Seven_Segment_Display>:
	}
}

//=================================================================================

void Seven_Segment_Display(u8 Mode, u8 Nibble, u8 port, u8 value){
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	2a 97       	sbiw	r28, 0x0a	; 10
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	de bf       	out	0x3e, r29	; 62
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	cd bf       	out	0x3d, r28	; 61
	if (0 == Mode){
 7be:	81 11       	cpse	r24, r1
 7c0:	0e c0       	rjmp	.+28     	; 0x7de <Seven_Segment_Display+0x34>
		if (0 == Nibble){
 7c2:	61 11       	cpse	r22, r1
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <Seven_Segment_Display+0x26>
			GPIO_Low_Nibble_vwrite(port,value);
 7c6:	62 2f       	mov	r22, r18
 7c8:	84 2f       	mov	r24, r20
 7ca:	0e 94 95 03 	call	0x72a	; 0x72a <GPIO_Low_Nibble_vwrite>
 7ce:	32 c0       	rjmp	.+100    	; 0x834 <Seven_Segment_Display+0x8a>
		}else if (1 == Nibble){
 7d0:	61 30       	cpi	r22, 0x01	; 1
 7d2:	81 f5       	brne	.+96     	; 0x834 <Seven_Segment_Display+0x8a>
			GPIO_High_Nibble_vwrite(port,value);
 7d4:	62 2f       	mov	r22, r18
 7d6:	84 2f       	mov	r24, r20
 7d8:	0e 94 3f 03 	call	0x67e	; 0x67e <GPIO_High_Nibble_vwrite>
 7dc:	2b c0       	rjmp	.+86     	; 0x834 <Seven_Segment_Display+0x8a>
		}
		else{
			
		}
	}else if (1 == Mode){
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	49 f5       	brne	.+82     	; 0x834 <Seven_Segment_Display+0x8a>
		if (value >=0 && value <=9)
 7e2:	2a 30       	cpi	r18, 0x0A	; 10
 7e4:	a0 f4       	brcc	.+40     	; 0x80e <Seven_Segment_Display+0x64>
		{
			u8 arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
 7e6:	8a e0       	ldi	r24, 0x0A	; 10
 7e8:	e0 e6       	ldi	r30, 0x60	; 96
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	de 01       	movw	r26, r28
 7ee:	11 96       	adiw	r26, 0x01	; 1
 7f0:	01 90       	ld	r0, Z+
 7f2:	0d 92       	st	X+, r0
 7f4:	8a 95       	dec	r24
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <Seven_Segment_Display+0x46>
			GPIO_vwrite_PORT(port,arr[value]);
 7f8:	e1 e0       	ldi	r30, 0x01	; 1
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	ec 0f       	add	r30, r28
 7fe:	fd 1f       	adc	r31, r29
 800:	e2 0f       	add	r30, r18
 802:	f1 1d       	adc	r31, r1
 804:	60 81       	ld	r22, Z
 806:	84 2f       	mov	r24, r20
 808:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GPIO_vwrite_PORT>
 80c:	13 c0       	rjmp	.+38     	; 0x834 <Seven_Segment_Display+0x8a>
			#define B	1
			#define C	2
			#define D	3
			#define E	4
			#define F	5
			u8 arr1[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
 80e:	86 e0       	ldi	r24, 0x06	; 6
 810:	ea e6       	ldi	r30, 0x6A	; 106
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	de 01       	movw	r26, r28
 816:	11 96       	adiw	r26, 0x01	; 1
 818:	01 90       	ld	r0, Z+
 81a:	0d 92       	st	X+, r0
 81c:	8a 95       	dec	r24
 81e:	e1 f7       	brne	.-8      	; 0x818 <Seven_Segment_Display+0x6e>
			GPIO_vwrite_PORT(port,arr1[value]);
 820:	e1 e0       	ldi	r30, 0x01	; 1
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	ec 0f       	add	r30, r28
 826:	fd 1f       	adc	r31, r29
 828:	e2 0f       	add	r30, r18
 82a:	f1 1d       	adc	r31, r1
 82c:	60 81       	ld	r22, Z
 82e:	84 2f       	mov	r24, r20
 830:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GPIO_vwrite_PORT>
	}
	else{
		
	}
		
 834:	2a 96       	adiw	r28, 0x0a	; 10
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	f8 94       	cli
 83a:	de bf       	out	0x3e, r29	; 62
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	cd bf       	out	0x3d, r28	; 61
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	08 95       	ret

00000846 <__tablejump2__>:
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31

0000084a <__tablejump__>:
 84a:	05 90       	lpm	r0, Z+
 84c:	f4 91       	lpm	r31, Z
 84e:	e0 2d       	mov	r30, r0
 850:	09 94       	ijmp

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
